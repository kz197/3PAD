import tkinter 
import tkinter as ttk
from tkinter import *
from tkinter import messagebox
import random
import time 



def evaluate(event):
    answer_input=solution_input.get() 
    try:
        answer_input=int(answer_input)
        if answer_input == answer:
            
            fire_blaster()
            solution_input.delete(0,END)
            
            generate_new_question()
            q_variable.set(question)
        else:
            solution_input.delete(0,END)
            messagebox.showwarning("wrong")
    except ValueError:
        messagebox.showwarning("Really?")
        solution_input.delete(0,END)

def generate_new_question():
    global answer, question
    answer, question = generate_question_level_1()
    q_variable.set(question)

def generate_question_level_1():
    while True:
        n1 = random.randint(0, 10)
        n2 = random.randint(0, 10)
        operation = random.choice(['+', '-', '/', '*'])
        
        if operation == '+':
            question = f"{n1} + {n2}"
            answer = n1 + n2
        elif operation == '-':
            question = f"{n1} - {n2}"
            answer = n1 - n2
        elif operation == '/':
            if n2 == 0:
                n2 = 1
            question = f"{n1} / {n2}"
            answer = n1 / n2

            if answer % 1 != 0:
                continue
            else: 
                answer = int(answer)
        elif operation == '*':
            question = f"{n1} * {n2}"
            answer = n1 * n2
        return answer, question
        
def generate_question_level_2():
    while True:
        n1 = random.randint(0, 100)
        n2 = random.randint(0, 100)
        operation = random.choice(['+', '-', '/', '*'])
        
        if operation == '+':
            question = f"{n1} + {n2}"
            answer = n1 + n2
        elif operation == '-':
            question = f"{n1} - {n2}"
            answer = n1 - n2
        elif operation == '/':
            if n2 == 0:
                n2 = 1
            question = f"{n1} / {n2}"
            answer = n1 / n2

            if answer % 1 != 0:
                continue
            else: 
                answer = int(answer)
        elif operation == '*':
            question = f"{n1} * {n2}"
            answer = n1 * n2
        return answer, question

def move_alien_L():
    if not aliens_frozen:  # Move only if aliens are not frozen
        for enemy in enemy_list:
            shooter_screen.move(enemy, -30, 0)

def move_alien_r():
    if not aliens_frozen:  # Move only if aliens are not frozen
        for enemy in enemy_list:
            shooter_screen.move(enemy, 30, 0)

def move_down():
    if not aliens_frozen:  # Move only if aliens are not frozen
        for enemy in enemy_list:
            shooter_screen.move(enemy, 0, 30)  # Move down by 30 pixels
        root.after(move_down_interval, start_movement)  # Restart the movement

def check_collision(blaster, blaster_index):
    global aliens_frozen
    blaster_coords = shooter_screen.coords(blaster)
    if len(blaster_coords) < 4:
        return  # Skip if blaster_coords is not valid
    
    for enemy in enemy_list:
        enemy_coords = shooter_screen.coords(enemy)
        if len(enemy_coords) < 4:
            continue  # Skip if enemy_coords is not valid
        if (blaster_coords[2] > enemy_coords[0] and blaster_coords[0] < enemy_coords[2] and
            blaster_coords[3] > enemy_coords[1] and blaster_coords[1] < enemy_coords[3]):
            shooter_screen.delete(enemy)  # Remove the enemy
            enemy_list.remove(enemy)
            shooter_screen.delete(blaster)  # Remove the blaster
            blasters.pop(blaster_index)  # Remove the blaster from the list

            if enemy_list == []: 
                for item in root.winfo_children():
                    item.destroy()
                Label(root, text= "GOOD GAMW").pack()
            break

def move_aliens_random():
    if not aliens_frozen:  # Move only if aliens are not frozen
        enemy_coords1 = shooter_screen.coords(enemy_list[0])
        enemy_coords2 = shooter_screen.coords(enemy_list[-1])

        if enemy_coords1[0] < 40:
            move_alien_r()  # Move right
        elif enemy_coords2[2] > 750:
            move_alien_L()  # Move left
        else:
            if random.choice([True, False]):
                move_alien_L()  # Move left
            else:
                move_alien_r()  # Move right

        current_time = time.time()
        if current_time - start_time < movement_duration / 1000:  # Convert ms to seconds
            root.after(200, move_aliens_random)  # Continue moving randomly
        else:
            move_down()  # Move down after 10 seconds

def start_movement():
    global start_time
    start_time = time.time()  # Record the start time
    move_aliens_random()  # Start moving the aliens


def fire_blaster():
    global aliens_frozen
    
    # Find the nearest alien to the player's current position
    player_coords = shooter_screen.coords(player)
    player_x_center = (player_coords[0] + player_coords[2]) / 2   # find the centre of the player
    
    nearest_alien = None
    min_distance = float('inf') #make minimum distance = positve infinity
    
    for enemy in enemy_list:
        enemy_coords = shooter_screen.coords(enemy)
        alien_x_center = (enemy_coords[0] + enemy_coords[2]) / 2
        distance = abs(alien_x_center - player_x_center) #turns any number positive
        
        if distance < min_distance:
            min_distance = distance
            nearest_alien = enemy
    
    # Move player directly beneath the nearest alien
    if nearest_alien:
        nearest_coords = shooter_screen.coords(nearest_alien)
        new_player_x = (nearest_coords[0] + nearest_coords[2]) / 2
        player_width = player_coords[2] - player_coords[0]
        current_player_x = (player_coords[0] + player_coords[2]) / 2
        shooter_screen.move(player, new_player_x - current_player_x, 0)  # Move player to new x position

    # Fire the blaster
    blaster_coords = shooter_screen.coords(player)
    x = (blaster_coords[0] + blaster_coords[2]) / 2  # Center of the player
    blaster = shooter_screen.create_rectangle(x - 2, blaster_coords[1] - 10, x + 2, blaster_coords[1] - 5, fill='yellow')
    blasters.append(blaster)  # Add the new blaster to the list
    
    if not aliens_frozen:
        aliens_frozen = True  # Freeze aliens when a shot is fired
    move_blaster()  # Start moving the blaster

def move_blaster():
    global aliens_frozen
    for i in range(len(blasters) - 1, -1, -1):  # Iterate over the blasters list in reverse order
        blaster = blasters[i]
        shooter_screen.move(blaster, 0, -10)  # Move blaster upwards
        blaster_coords = shooter_screen.coords(blaster)
        if blaster_coords[1] < 0:  # If blaster goes off screen
            shooter_screen.delete(blaster)
            blasters.pop(i)  # Remove the blaster from the list
        else:
            check_collision(blaster, i)  # Check for collision with each movement

    if not blasters:  # If all blasters are gone
        aliens_frozen = False  # Unfreeze the aliens
        root.after(200, start_movement)  # Resume alien movement

    if blasters:  # Continue moving the blasters if any are still on screen
        root.after(50, move_blaster)

def check_collision(blaster, blaster_index):
    global aliens_frozen
    blaster_coords = shooter_screen.coords(blaster)
    if len(blaster_coords) < 4:
        return  # Skip if blaster_coords is not valid
    
    for enemy in enemy_list:
        enemy_coords = shooter_screen.coords(enemy)
        if len(enemy_coords) < 4:
            continue  # Skip if enemy_coords is not valid
        if (blaster_coords[2] > enemy_coords[0] and blaster_coords[0] < enemy_coords[2] and
            blaster_coords[3] > enemy_coords[1] and blaster_coords[1] < enemy_coords[3]):
            shooter_screen.delete(enemy)  # Remove the enemy
            enemy_list.remove(enemy)
            shooter_screen.delete(blaster)  # Remove the blaster
            blasters.pop(blaster_index)  # Remove the blaster from the list

            if enemy_list == []: 
                for item in root.winfo_children():
                    item.destroy()
                Label(root, text= "GOOD GAMW").pack()
            break

def fire(event):
    fire_blaster()

def start_game():
    start_movement()  # Start the movement


            
                
root=  tkinter.Tk()
root.config(bg='Black' )
root.geometry("1000x1200")
#shooter screen
shooter_screen= tkinter.Canvas(width=800, height=600, bg="green")
shooter_screen.pack()
shooter_screen.grid(row = 0 , column= 0 , padx =100, pady = 50, )

enemy1 = shooter_screen.create_rectangle(10, 10, 40, 40, outline="white")
enemy2 = shooter_screen.create_rectangle(50, 10, 80, 40, outline="white")
enemy3 = shooter_screen.create_rectangle(90, 10, 120, 40, outline="white")
enemy4 = shooter_screen.create_rectangle(130, 10, 160, 40, outline="white")
enemy5 = shooter_screen.create_rectangle(170, 10, 200, 40, outline="white")
enemy6 = shooter_screen.create_rectangle(210, 10, 240, 40, outline="white")
enemy7 = shooter_screen.create_rectangle(250, 10, 280, 40, outline="white")
enemy8 = shooter_screen.create_rectangle(290, 10, 320, 40, outline="white")
global enemy_list
enemy_list = [enemy1, enemy2, enemy3, enemy4, enemy5, enemy6, enemy7, enemy8]



player = shooter_screen.create_oval(10, 580, 20, 590, outline='red')
blasters = []  # List to hold multiple blaster shots
aliens_frozen = False  # Flag to check if aliens are frozen

# Variables to control the timer
movement_duration = 10000  # 10 seconds in milliseconds
move_down_interval = 2000  # 2 seconds between movements down
start_time = None  # Track when the movement started




#question screen
question_screen = tkinter.LabelFrame(root,text= "Maths",width = 800, height = 300)
question_screen.configure(bg="blue")
question_screen.grid(row=1, column=0, padx = 10, pady = 20)



answer, question = generate_question_level_1()
print(question)
q_variable = tkinter.StringVar()
q_variable.set(question)
display_question = tkinter.Label(question_screen,textvariable=q_variable)
display_question.grid(row=1, column=1)



solution_input = tkinter.Entry(question_screen)
solution_input.grid(row= 1 , column=2)
root.bind("<Return>", evaluate)



solution_entry = tkinter.Button(question_screen, text="Answer", command=lambda: evaluate(None))
print("bolos")

solution_entry.grid(row =1 , column=3)
root.bind("<space>", fire)
root.after(100, start_game)
root.mainloop()
